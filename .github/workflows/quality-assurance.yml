name: 品質保証 - 機能デグレード防止

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  quality-tests:
    name: 品質テスト実行
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: ai_agent_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
    
    - name: Node.js ${{ matrix.node-version }} セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 依存関係インストール
      working-directory: backend
      run: npm ci
    
    - name: 環境変数設定
      working-directory: backend
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/ai_agent_test" >> .env.test
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "JWT_SECRET=test-jwt-secret-for-ci" >> .env.test
        echo "ANTHROPIC_API_KEY=test-anthropic-key" >> .env.test
        echo "ZOOM_WEBHOOK_SECRET=test-webhook-secret" >> .env.test
    
    - name: 品質テスト実行
      working-directory: backend
      run: npm test
      env:
        NODE_ENV: test
    
    - name: テスト結果アップロード
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          backend/coverage/
          backend/test-results.xml
        retention-days: 7

  regression-detection:
    name: 機能デグレード検出
    runs-on: ubuntu-latest
    needs: quality-tests
    if: always()
    
    steps:
    - name: リポジトリチェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 依存関係インストール
      working-directory: backend
      run: npm ci
    
    - name: 重要機能テスト実行
      working-directory: backend
      run: |
        echo "🔍 VTT解析品質テスト"
        npm test -- tests/vtt-quality.test.js --verbose
        
        echo "🔍 議事録生成品質テスト"
        npm test -- tests/transcript-quality.test.js --verbose
        
        echo "🔍 メール配布品質テスト"
        npm test -- tests/email-distribution.test.js --verbose
        
        echo "🔍 データベース整合性テスト"
        npm test -- tests/database-integrity.test.js --verbose
        
        echo "🔍 Webhook処理品質テスト"
        npm test -- tests/webhook-processing.test.js --verbose
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:test@localhost:5432/ai_agent_test
        REDIS_URL: redis://localhost:6379
    
    - name: デグレード検出結果
      if: failure()
      run: |
        echo "❌ 機能デグレードが検出されました！"
        echo "以下の重要機能に問題があります："
        echo "- VTT解析による発言者名抽出"
        echo "- 議事録生成での実名保持"
        echo "- メール配布履歴の記録"
        echo "- データベース制約の整合性"
        echo "- Webhook処理の安定性"
        exit 1
    
    - name: 品質保証成功
      if: success()
      run: |
        echo "✅ 全ての品質テストが成功しました！"
        echo "機能デグレードは検出されませんでした。"

  notify-results:
    name: 結果通知
    runs-on: ubuntu-latest
    needs: [quality-tests, regression-detection]
    if: always()
    
    steps:
    - name: 成功通知
      if: needs.quality-tests.result == 'success' && needs.regression-detection.result == 'success'
      run: |
        echo "🎉 品質保証テストが完了しました"
        echo "✅ 全28個のテストが成功"
        echo "✅ 機能デグレードなし"
        echo "✅ システム品質維持"
    
    - name: 失敗通知
      if: needs.quality-tests.result == 'failure' || needs.regression-detection.result == 'failure'
      run: |
        echo "⚠️ 品質保証テストで問題が検出されました"
        echo "詳細は上記のジョブログを確認してください"
        exit 1